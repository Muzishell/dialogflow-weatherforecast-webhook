// @flow
import http from 'http';

const host = 'api.worldweatheronline.com';
const wwoApiKey = '4609318e096144a6900162848181310';

export default function weatherForecast (city: string, date: string) {
  return new Promise<any>((resolve, reject) => {
    // Create the path for the HTTP request to get the weather
    let path = '/premium/v1/weather.ashx?format=json&num_of_days=1' +
      '&q=' + encodeURIComponent(city) + '&key=' + wwoApiKey + '&date=' + date;
    console.log('API Request: ' + host + path);

    // Make the HTTP request to get the weather
    http.get({host: host, path: path}, (res) => {
      let body = ''; // var to store the response chunks
      res.on('data', (d) => { body += d; }); // store each response chunk
      res.on('end', () => {
        // After all the data has been received parse the JSON for desired data
        let response = JSON.parse(body);

        if (response.data.error) {
          reject(new Error(response.data.error));
          return;
        }

        let forecast = response['data']['weather'][0];
        let location = response['data']['request'][0];
        let conditions = response['data']['current_condition'][0];
        let currentConditions = conditions['weatherDesc'][0]['value'];

        // Create response
        let output = `Current conditions in the ${location['type']}
        ${location['query']} are ${currentConditions} with a projected high of
        ${forecast['maxtempC']}째C or ${forecast['maxtempF']}째F and a low of
        ${forecast['mintempC']}째C or ${forecast['mintempF']}째F on
        ${forecast['date']}.`;

        // Resolve the promise with the output text
        resolve(output);
      });
      // I removed the res.on('error') because i couldn't find a way to trigger it. My bad
    });
  });
}
